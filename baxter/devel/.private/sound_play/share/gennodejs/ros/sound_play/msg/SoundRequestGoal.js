// Auto-generated. Do not edit!

// (in-package sound_play.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let SoundRequest = require('./SoundRequest.js');

//-----------------------------------------------------------

class SoundRequestGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.sound_request = null;
    }
    else {
      if (initObj.hasOwnProperty('sound_request')) {
        this.sound_request = initObj.sound_request
      }
      else {
        this.sound_request = new SoundRequest();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type SoundRequestGoal
    // Serialize message field [sound_request]
    bufferOffset = SoundRequest.serialize(obj.sound_request, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type SoundRequestGoal
    let len;
    let data = new SoundRequestGoal(null);
    // Deserialize message field [sound_request]
    data.sound_request = SoundRequest.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += SoundRequest.getMessageSize(object.sound_request);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'sound_play/SoundRequestGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '3bd5e9e7f60b85cc6f1b7662fe6e1903';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    SoundRequest sound_request
    
    ================================================================================
    MSG: sound_play/SoundRequest
    # IMPORTANT: You should never have to generate this message yourself.
    # Use the sound_play::SoundClient C++ helper or the
    # sound_play.libsoundplay.SoundClient Python helper.
    
    # Sounds
    int8 BACKINGUP = 1
    int8 NEEDS_UNPLUGGING = 2
    int8 NEEDS_PLUGGING = 3
    int8 NEEDS_UNPLUGGING_BADLY = 4
    int8 NEEDS_PLUGGING_BADLY = 5
    
    # Sound identifiers that have special meaning
    int8 ALL = -1 # Only legal with PLAY_STOP
    int8 PLAY_FILE = -2
    int8 SAY = -3
    
    int8 sound # Selects which sound to play (see above)
    
    # Commands
    int8 PLAY_STOP = 0 # Stop this sound from playing
    int8 PLAY_ONCE = 1 # Play the sound once
    int8 PLAY_START = 2 # Play the sound in a loop until a stop request occurs
    
    int8 command # Indicates what to do with the sound
    
    # Volume at which to play the sound, with 0 as mute and 1.0 as 100%.
    float32 volume
    
    string arg # file name or text to say
    string arg2 # other arguments
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new SoundRequestGoal(null);
    if (msg.sound_request !== undefined) {
      resolved.sound_request = SoundRequest.Resolve(msg.sound_request)
    }
    else {
      resolved.sound_request = new SoundRequest()
    }

    return resolved;
    }
};

module.exports = SoundRequestGoal;
